{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/deshi/code/ShkoloProj/App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState, useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as Facebook from \"expo-facebook\";\nimport Constants from \"expo-constants\";\nexport default function App() {\n  var _this = this;\n\n  var appId = Constants.manifest.extra.facebook.appId;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      responseJson = _useState2[0],\n      setResponseJson = _useState2[1];\n\n  callGraph = function callGraph(token) {\n    var response, responseJSON;\n    return _regeneratorRuntime.async(function callGraph$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://graph.facebook.com/me?access_token=\" + token + \"&fields=id,name,email,about,picture\"));\n\n          case 2:\n            response = _context.sent;\n            _context.t0 = JSON;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            _context.t1 = _context.sent;\n            responseJSON = _context.t0.stringify.call(_context.t0, _context.t1);\n\n            _this.setState({\n              responseJSON: responseJSON\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  login = function login() {\n    var _await$Expo$Facebook$, type, token;\n\n    return _regeneratorRuntime.async(function login$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Expo.Facebook.logInWithReadPermissionsAsync('YOUR_ID_HERE :)', {\n              permissions: ['public_profile', 'email', 'user_friends']\n            }));\n\n          case 2:\n            _await$Expo$Facebook$ = _context2.sent;\n            type = _await$Expo$Facebook$.type;\n            token = _await$Expo$Facebook$.token;\n\n            if (type === 'success') {\n              _this.callGraph(token);\n\n              _this.firebaseLogin(token);\n            }\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Open up App.js to start working on your app!\"), React.createElement(Button, {\n    title: \"Change text\",\n    onPress: function onPress() {\n      return console.log(appId);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/deshi/code/ShkoloProj/App.js"],"names":["StatusBar","React","useEffect","useState","useContext","Facebook","Constants","App","appId","manifest","extra","facebook","responseJson","setResponseJson","callGraph","token","fetch","response","JSON","json","responseJSON","stringify","setState","login","Expo","logInWithReadPermissionsAsync","permissions","type","firebaseLogin","styles","container","console","log","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;AAAA,SAAQA,SAAR,QAAwB,iBAAxB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,QAAqD,OAArD;;;;;AAEA,OAAO,KAAKC,QAAZ,MAA0B,eAA1B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,MAAMC,KAAK,GAAGF,SAAS,CAACG,QAAV,CAAmBC,KAAnB,CAAyBC,QAAzB,CAAkCH,KAAhD;;AAD4B,kBAGYL,QAAQ,CAAC,IAAD,CAHpB;AAAA;AAAA,MAGrBS,YAHqB;AAAA,MAGPC,eAHO;;AAK5BC,EAAAA,SAAS,GAAG,mBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEaC,KAAK,iDACoBD,KADpB,yCAFlB;;AAAA;AAEJE,YAAAA,QAFI;AAAA,0BAKWC,IALX;AAAA;AAAA,6CAKgCD,QAAQ,CAACE,IAAT,EALhC;;AAAA;AAAA;AAKJC,YAAAA,YALI,eAKgBC,SALhB;;AAMV,YAAA,KAAI,CAACC,QAAL,CAAc;AAAEF,cAAAA,YAAY,EAAZA;AAAF,aAAd;;AANU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AASAG,EAAAA,KAAK,GAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAIIC,IAAI,CAACnB,QAAL,CAAcoB,6BAAd,CAA4C,iBAA5C,EAA+D;AACvEC,cAAAA,WAAW,EAAE,CAAC,gBAAD,EAAmB,OAAnB,EAA4B,cAA5B;AAD0D,aAA/D,CAJJ;;AAAA;AAAA;AAEJC,YAAAA,IAFI,yBAEJA,IAFI;AAGJZ,YAAAA,KAHI,yBAGJA,KAHI;;AAQN,gBAAIY,IAAI,KAAK,SAAb,EAAwB;AACtB,cAAA,KAAI,CAACb,SAAL,CAAeC,KAAf;;AAEA,cAAA,KAAI,CAACa,aAAL,CAAmBb,KAAnB;AACD;;AAZK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAR;;AA2BA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEc,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADF,EAEE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,aAAd;AAA4B,IAAA,OAAO,EAAE;AAAA,aAAMC,OAAO,CAACC,GAAR,CAAYxB,KAAZ,CAAN;AAAA,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;AAED,IAAMqB,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf","sourcesContent":["import {StatusBar} from 'expo-status-bar';\nimport React, {useEffect, useState, useContext} from 'react';\nimport {StyleSheet, Text, View, Button} from 'react-native';\nimport * as Facebook from \"expo-facebook\";\nimport Constants from \"expo-constants\";\n\n\nexport default function App() {\n  const appId = Constants.manifest.extra.facebook.appId;\n\n  const [responseJson, setResponseJson] = useState(null);\n  \n  callGraph = async token => {\n    /// Look at the fields... I don't have an `about` on my profile but everything else should get returned.\n    const response = await fetch(\n      `https://graph.facebook.com/me?access_token=${token}&fields=id,name,email,about,picture`\n    );\n    const responseJSON = JSON.stringify(await response.json());\n    this.setState({ responseJSON });\n  };\n\n  login = async () => {\n    const {\n      type,\n      token,\n    } = await Expo.Facebook.logInWithReadPermissionsAsync('YOUR_ID_HERE :)', {\n      permissions: ['public_profile', 'email', 'user_friends'],\n    });\n\n    if (type === 'success') {\n      this.callGraph(token);\n\n      this.firebaseLogin(token);\n    }\n  };\n\n\n  // const initSocialLogin = async () => {\n  //   try {\n  //     await Facebook.initializeAsync(FB_APP_ID);\n  //   } catch (e) {\n  //     console.log(e);\n  //   }\n  // };\n  // useEffect(() => {\n  //   initSocialLogin();\n  // }, []);\n\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <Button title=\"Change text\" onPress={() => console.log(appId)}/>\n      <StatusBar style=\"auto\"/>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}